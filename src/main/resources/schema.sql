-- create table users
create table if not exists USERS
(
    USER_ID   INT generated by default as identity primary key,
    USER_NAME VARCHAR(100) not null,
    LOGIN     VARCHAR(50) not null,
    EMAIL     VARCHAR(200) not null,
    BIRTHDAY  DATE not null,
    constraint CHECK_BIRTHDAY
        check ("BIRTHDAY" < NOW()),
    constraint CHECK_EMAIL
        check ("EMAIL" LIKE '%@%.%'),
    constraint CHECK_LOGIN
        check ("LOGIN" <> '')
);

-- create table friends
create table if not exists FRIENDS
(
    USER_ID   INT references USERS(USER_ID),
    FRIEND_ID INT references USERS(USER_ID),
    primary key (USER_ID, FRIEND_ID)
);

-- create table mpa
create table if not exists MPA
(
    MPA_ID   INT generated by default as identity primary key,
    MPA_NAME VARCHAR(5) not null
);

-- create table films
create table if not exists FILMS
(
    FILM_ID      INT generated by default as identity primary key,
    FILM_NAME    VARCHAR(100) not null,
    DESCRIPTION  VARCHAR(200) not null,
    RELEASE_DATE DATE not null,
    DURATION     INT not null,
    MPA_ID       INT references MPA(MPA_ID),
    constraint CHECK_DURATION
        check ("DURATION" > 0),
    constraint CHECK_NAME
        check ("FILM_NAME" <> ''),
    constraint CHECK_RELEASE_DATE
        check ("RELEASE_DATE" > DATE '1895-12-28')
);

-- create table genres
create table if not exists GENRES
(
    GENRE_ID   INT generated by default as identity primary key,
    GENRE_NAME VARCHAR(14) not null
);

-- create table films_genres
create table if not exists FILMS_GENRES
(
    FILM_ID  INT references FILMS(FILM_ID),
    GENRE_ID INT references GENRES(GENRE_ID),
    primary key (FILM_ID, GENRE_ID)
);

-- create table likes
create table if not exists LIKES
(
    FILM_ID INT references FILMS(FILM_ID),
    USER_ID INT references USERS(USER_ID),
    primary key (FILM_ID, USER_ID)
);
